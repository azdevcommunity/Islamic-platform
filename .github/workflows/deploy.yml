#name: Build & Deploy (Next.js)
#
#on:
#  push:
#    branches: [ "master" ]
#
#env:
#  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/islamic-platform
#  APP_PORT: 8086        # host port → container 3000’e map edilir
#
#jobs:
#  build-and-push:
#    runs-on: ubuntu-latest
#    environment: VPS
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Login to GHCR (GITHUB_TOKEN ile)
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels)
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.IMAGE_NAME }}
#          tags: |
#            type=sha
#            type=raw,value=latest
#
#      - name: Build and push image
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          build-args: |
#            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
#            NEXT_PUBLIC_BASE_URL_YTB=${{ secrets.NEXT_PUBLIC_BASE_URL_YTB }}
#            DEFAULT_PLAYLIST_ID=${{ secrets.DEFAULT_PLAYLIST_ID }}
#
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-push
#    environment: VPS
#    steps:
#      - name: Fail fast if required secrets are empty
#        run: |
#          set -e
#          test -n "${{ secrets.VPS_HOST }}" || { echo "❌ VPS_HOST empty"; exit 1; }
#          test -n "${{ secrets.VPS_USER }}" || { echo "❌ VPS_USER empty"; exit 1; }
#          test -n "${{ secrets.VPS_SSH_KEY }}" || { echo "❌ VPS_SSH_KEY empty"; exit 1; }
#          test -n "${{ secrets.GHCR_USERNAME }}" || { echo "❌ GHCR_USERNAME empty"; exit 1; }
#          test -n "${{ secrets.GHCR_TOKEN }}" || { echo "❌ GHCR_TOKEN empty"; exit 1; }
#          test -n "${{ secrets.APP_ENV_NODE_ENV }}" || { echo "❌ APP_ENV_NODE_ENV empty"; exit 1; }
#          test -n "${{ secrets.NEXT_PUBLIC_BASE_URL }}" || { echo "❌ NEXT_PUBLIC_BASE_URL empty"; exit 1; }
#          test -n "${{ secrets.NEXT_PUBLIC_BASE_URL_YTB }}" || { echo "❌ NEXT_PUBLIC_BASE_URL_YTB empty"; exit 1; }
#          test -n "${{ secrets.DEFAULT_PLAYLIST_ID }}" || { echo "❌ DEFAULT_PLAYLIST_ID empty"; exit 1; }
#          test -n "${{ secrets.NEXT_PUBLIC_REVALIDATE_SECRET }}" || { echo "❌ NEXT_PUBLIC_REVALIDATE_SECRET empty"; exit 1; }
#
#      - name: SSH into server and deploy
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: ${{ secrets.VPS_USER }}
#          key: ${{ secrets.VPS_SSH_KEY }}
#          script_stop: true
#          script: |
#            set -euo pipefail
#
#            IMAGE="${{ env.IMAGE_NAME }}:latest"
#            APP_PORT="${{ env.APP_PORT }}"
#            ENV_FILE="/root/esm-frontend.env"
#
#            # Network mevcutsa hata vermesin
#            docker network create esm_network >/dev/null 2>&1 || true
#
#            echo "[GHCR] Login (server-side pull)"
#            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
#
#            echo "[Pull] $IMAGE"
#            docker pull "$IMAGE"
#
#            echo "[ENV] write $ENV_FILE"
#            umask 077
#            cat > "$ENV_FILE" <<EOF
#            NODE_ENV=${{ secrets.APP_ENV_NODE_ENV }}
#            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
#            NEXT_PUBLIC_BASE_URL_YTB=${{ secrets.NEXT_PUBLIC_BASE_URL_YTB }}
#            DEFAULT_PLAYLIST_ID=${{ secrets.DEFAULT_PLAYLIST_ID }}
#            NEXT_PUBLIC_REVALIDATE_SECRET=${{ secrets.NEXT_PUBLIC_REVALIDATE_SECRET }}
#            EOF
#
#            echo "[Stop] container using port ${APP_PORT} (if any)"
#            CID=$(docker ps --format '{{.ID}} {{.Ports}}' | awk '/:'"$APP_PORT"'->/ {print $1}' | head -n1)
#            if [ -n "${CID:-}" ]; then
#            docker stop "$CID" || true
#            fi
#
#            NAME="esm-frontend-$(date +%s)"
#            echo "[Run] $NAME (map ${APP_PORT}:3000)"
#            docker run -d \
#            --name "$NAME" \
#            --restart unless-stopped \
#            --env-file "$ENV_FILE" \
#            -p ${APP_PORT}:3000 \
#            -v /var/www/esm/uploads:/app/uploads \
#            --network esm_network \
#            --network-alias esm-frontend \
#            "$IMAGE"
#
#            echo "[Health] http://127.0.0.1:${APP_PORT}/"
#            ok=0
#            for i in $(seq 1 45); do
#            if curl -fsS "http://127.0.0.1:${APP_PORT}/" >/dev/null 2>&1; then
#            echo "UP"
#            ok=1
#            break
#            fi
#            sleep 1
#            done
#            if [ "$ok" -ne 1 ]; then
#            echo "❌ Healthcheck failed. Showing last logs:"
#            docker logs --tail=200 "$NAME" || true
#            exit 1
#            fi
#
#            echo "[Cleanup] old exited containers"
#            docker ps -a --filter 'status=exited' --filter 'name=esm-frontend-' --format '{{.ID}}' | xargs -r docker rm
#
#            echo "[Cleanup] prune dangling images"
#            docker image prune -f
#
#            docker logout ghcr.io || true
